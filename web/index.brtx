{bypass end}
<link rel="alternate" title="ocaml-mysql activity" href="https://forge.ocamlcore.org/export/rss20_activity.php?group_id=137" type="application/rss+xml"/>
{end}

{section 1|ocaml-mysql}

{section 2|Description}

{p}Bindings for interacting with {link http://www.mysql.com|MySQL} databases from {link
http://caml.inria.fr|OCaml}.
{p}This project is based on
{link http://raevnos.pennmush.org/code/ocaml-mysql/|ocaml-mysql by Shawn Wagner} (version 1.0.4
released in 2006). The initial goal was to fix bugs and add prepared statements support.

{section 2|Links}

{begin list}
{*}{link https://forge.ocamlcore.org/projects/ocaml-mysql/|OCamlCore project page}
{*}{link https://forge.ocamlcore.org/frs/?group_id=137|Download}
{begin list}
  {*}{link https://forge.ocamlcore.org/frs/download.php/336/ocaml-mysql-1.1.0.tar.gz|ocaml-mysql-1.1.0.tar.gz}, 26 Dec 2009
{end}
#{*}{link https://forge.ocamlcore.org/export/rss20_activity.php?group_id=137|RSS}
{*}{link https://forge.ocamlcore.org/tracker/?group_id=137|Bug tracker}
{*}Code
{begin list}
  {*}{link http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=ocaml-mysql/ocaml-mysql.git;a=summary|gitweb}
  {*}http://git.ocamlcore.org/ocaml-mysql/ocaml-mysql.git/
  {*}git+ssh://forge.ocamlcore.org/gitroot/ocaml-mysql/ocaml-mysql.git
{end}
{*}{link
http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=ocaml-mysql/ocaml-mysql.git;a=blob_plain;f=README;hb=HEAD|README}
{*}{link
http://git.ocamlcore.org/cgi-bin/gitweb.cgi?p=ocaml-mysql/ocaml-mysql.git;a=blob_plain;f=CHANGES;hb=HEAD|CHANGES}
{*}{link doc/index.html|Online API documentation}
{end}

{section 2|Benchmark}

{p}Horizontal axis shows the number of columns (and as such the number of values in each put/get request).
Vertical axis shows resource usage (time, memory, GC) -- on all graphs less is better.
All databases were configured to store data in memory so this test primarily measures the speed of communication
with database (and bindings implementation).
{begin list}
{*}Version 1.1.0 triggers GC less often during querying and reconnecting, achieveing slight speedup.
{*}Prepared statements are significantly faster and put less strain on GC (though current implementation is suboptimal).
{end}

{bypass end}
<img src="dbspeed.svg"/>
<hr/>
{end}

